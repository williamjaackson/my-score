// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  name      String
  email     String?  @unique
  password  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  relatedUsers              RelatedUser[]
  criminalRecords           CriminalRecord[]
  others                    Other[]
  criminalScore             Int                  @default(250)
  otherScore                Int                  @default(200)
  ratingScore               Int                  @default(125)
  relationScore             Int                  @default(250)
  ratingsReceived           Rating[]             @relation("RatedByUsers")
  ratingsGiven              Rating[]             @relation("UserRatings")
  proximitySessionsAsUser   ProximitySession[]   @relation("UserProximitySessions")
  proximitySessionsAsNearby ProximitySession[]   @relation("NearbyUserProximitySessions")
  proximityTotalsAsUser     UserProximityTotal[] @relation("UserProximityTotals")
  proximityTotalsAsNearby   UserProximityTotal[] @relation("NearbyUserProximityTotals")
  faceDescriptor            FaceDescriptor?   // Relation to FaceDescriptor

  // Wall / global chat
  wallPosts WallPost[]

  @@index([email])
  @@index([createdAt])
}

enum RatingType {
  POSITIVE
  NEGATIVE
}

model Rating {
  id        String     @id @default(cuid())
  targetId  String
  target    User       @relation("RatedByUsers", fields: [targetId], references: [id], onDelete: Cascade)
  rating    RatingType
  comment   String?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  authorId  String
  author    User       @relation("UserRatings", fields: [authorId], references: [id], onDelete: Cascade)

  @@unique([authorId, targetId])
  @@index([targetId])
  @@index([authorId])
  @@index([createdAt])
}

model RelatedUser {
  id            String   @id @default(cuid())
  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  relatedUserId String
  spentTimeMs   Int // Changed to milliseconds for consistency
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@unique([userId, relatedUserId])
  @@index([userId])
  @@index([relatedUserId])
}

model CriminalRecord {
  id          String    @id @default(cuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  description String
  severity    String? // Added severity field
  date        DateTime? // Date of the incident
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([userId])
  @@index([date])
}

model Other {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  score     Int
  category  String? // Added category for different score types
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([category])
}

model ProximitySession {
  id           Int      @id @default(autoincrement())
  userId       String   @map("user_id")
  user         User     @relation("UserProximitySessions", fields: [userId], references: [id], onDelete: Cascade)
  nearbyUserId String   @map("nearby_user_id")
  nearbyUser   User     @relation("NearbyUserProximitySessions", fields: [nearbyUserId], references: [id], onDelete: Cascade)
  startTime    BigInt   @map("start_time")
  endTime      BigInt?  @map("end_time") // Made optional for ongoing sessions
  durationMs   BigInt?  @map("duration_ms") // Made optional, calculated field
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  @@unique([userId, nearbyUserId, startTime])
  @@index([userId])
  @@index([nearbyUserId])
  @@index([startTime])
  @@index([endTime])
  @@map("proximity_sessions")
}

model UserProximityTotal {
  userId          String    @map("user_id")
  user            User      @relation("UserProximityTotals", fields: [userId], references: [id], onDelete: Cascade)
  nearbyUserId    String    @map("nearby_user_id")
  nearbyUser      User      @relation("NearbyUserProximityTotals", fields: [nearbyUserId], references: [id], onDelete: Cascade)
  totalDurationMs BigInt    @default(0) @map("total_duration_ms")
  sessionCount    Int       @default(0) @map("session_count") // Track number of sessions
  lastSessionAt   DateTime? @map("last_session_at") // When last session occurred
  createdAt       DateTime  @default(now()) @map("created_at")
  lastUpdated     DateTime  @default(now()) @updatedAt @map("last_updated")

  @@id([userId, nearbyUserId])
  @@index([totalDurationMs])
  @@index([lastSessionAt])
  @@map("user_proximity_totals")
}

model WallPost {
  id                String   @id @default(cuid())
  userId            String
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  content           String // message body (simple text)
  govSentimentScore Float? // 0 (against), 0.5 (neutral/not mentioned), 1 (in favour)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@index([userId])
  @@index([createdAt])
}
model FaceDescriptor {
  id         String   @id @default(cuid())
  descriptor Json
  userId     String   @unique
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([userId])
}
